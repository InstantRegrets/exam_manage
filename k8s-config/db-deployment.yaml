apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
#        io.kompose.network/exam-manage-back-tier: "true"
        io.kompose.service: db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: exam-manage
            - name: POSTGRES_PASSWORD #Env Variablen aus dem Secret auslesen
              valueFrom:
                secretKeyRef:
                  name: db-auth
                  key: db-password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-auth
                  key: db-user
          image: postgres:latest
          ports:
            - containerPort: 5432 # Nachtr채glich hinzugef체gt, in Docker Compose nicht exposed
          name: db
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
      restartPolicy: Always
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    io.kompose.service: db # Selber Selector wie oben. M체ssen 체bereinstimmen. Key von kompose definiert
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432